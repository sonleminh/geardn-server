generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ==== PRODUCT DOMAIN ====
//

model Product {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  slug        String   @unique
  description String?
  brand       String   @default("Kh√¥ng")
  images      String[]
  tags        Json
  details     Json?
  isDeleted   Boolean  @default(false)
  categoryId  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category  Category     @relation(fields: [categoryId], references: [id])
  skus      ProductSKU[] @relation("ProductToSKU")
  CartItem  CartItem[]
  OrderItem OrderItem[]

  @@index([categoryId])
  @@index([slug])
}

model ProductSKU {
  id        Int      @id @default(autoincrement())
  productId Int
  sku       String   @unique
  price     Decimal
  imageUrl  String?
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product             Product               @relation("ProductToSKU", fields: [productId], references: [id])
  productSkuAttribute ProductSKUAttribute[] @relation("SkuToAttribute")
  CartItem            CartItem[]
  OrderItem           OrderItem[]
  ImportLogItem       ImportLogItem[]
  Stock               Stock[]

  @@index([productId])
}

model Attribute {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  label     String
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  values AttributeValue[]
}

model AttributeValue {
  id          Int      @id @default(autoincrement())
  value       String
  attributeId Int
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  attribute           Attribute             @relation(fields: [attributeId], references: [id])
  productSkuAttribute ProductSKUAttribute[]

  @@index([attributeId])
}

model ProductSKUAttribute {
  id               Int @id @default(autoincrement())
  skuId            Int
  attributeValueId Int

  productSku     ProductSKU     @relation("SkuToAttribute", fields: [skuId], references: [id])
  attributeValue AttributeValue @relation(fields: [attributeValueId], references: [id])

  @@unique([skuId, attributeValueId])
  @@index([skuId])
  @@index([attributeValueId])
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  slug      String   @unique
  icon      String
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
}

//
// ==== ORDER & CART ====
//

model Order {
  id              Int         @id @default(autoincrement())
  userId          Int?
  orderCode       String      @unique
  totalPrice      Decimal
  status          OrderStatus @default(PENDING)
  fullName        String
  phoneNumber     String
  email           String?
  note            String?
  flag            Json        @default("{}")
  shipment        Json        @default("{}")
  paymentMethodId Int
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  user          User?         @relation(fields: [userId], references: [id])
  paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  orderItems    OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  skuId     Int
  quantity  Int
  price     Decimal

  order   Order      @relation(fields: [orderId], references: [id])
  product Product    @relation(fields: [productId], references: [id])
  sku     ProductSKU @relation(fields: [skuId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User       @relation(fields: [userId], references: [id])
  items CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  skuId     Int
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart       @relation(fields: [cartId], references: [id])
  product Product    @relation(fields: [productId], references: [id])
  sku     ProductSKU @relation(fields: [skuId], references: [id])

  @@unique([cartId, productId, skuId])
  @@index([cartId])
  @@index([skuId])
  @@index([productId])
}

//
// ==== STOCK & IMPORT ====
//

model Warehouse {
  id        Int      @id @default(autoincrement())
  name      String
  address   String
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  importLogs ImportLog[]
  Stock      Stock[]
}

model Stock {
  id          Int @id @default(autoincrement())
  skuId       Int
  warehouseId Int
  quantity    Int @default(0)

  sku       ProductSKU @relation(fields: [skuId], references: [id])
  warehouse Warehouse  @relation(fields: [warehouseId], references: [id])

  @@unique([skuId, warehouseId])
  @@index([skuId])
  @@index([warehouseId])
}

model ImportLog {
  id          Int      @id @default(autoincrement())
  warehouseId Int
  staffId     Int?
  note        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  warehouse Warehouse       @relation(fields: [warehouseId], references: [id])
  staff     User?           @relation(fields: [staffId], references: [id])
  items     ImportLogItem[]
}

model ImportLogItem {
  id          Int     @id @default(autoincrement())
  importLogId Int
  skuId       Int
  quantity    Int
  price       Decimal
  note        String?

  importLog ImportLog  @relation(fields: [importLogId], references: [id])
  sku       ProductSKU @relation(fields: [skuId], references: [id])
}

//
// ==== USER & PAYMENT ====
//

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Cart      Cart?
  Order     Order[]
  ImportLog ImportLog[]
}

model PaymentMethod {
  id         Int      @id @default(autoincrement())
  key        String   @unique
  name       String   @unique
  image      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isDisabled Boolean  @default(false)

  Order Order[]
}

//
// ==== ENUMS ====
//

enum UserRole {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}
