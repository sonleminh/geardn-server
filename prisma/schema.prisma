generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  categoryId  Int
  category    Category     @relation(fields: [categoryId], references: [id])
  tags        Json
  images      String[]
  brand       String       @default("Không")
  details     Json?
  description String?
  slug        String       @unique
  isDeleted   Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  skus        ProductSKU[] @relation("ProductToSKU")
  CartItem    CartItem[]
}

model ProductAttribute {
  id                   Int                   @id @default(autoincrement())
  type                 ProductAttributeType
  value                String
  isDeleted            Boolean               @default(false)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  productSkuAttributes ProductSKUAttribute[]
}

model ProductSKU {
  id        Int      @id @default(autoincrement())
  productId Int
  sku       String   @unique
  imageUrl  String?
  price     Decimal
  quantity  Int
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product              Product               @relation("ProductToSKU", fields: [productId], references: [id])
  productSkuAttributes ProductSKUAttribute[] @relation("SkuToAttribute")
  CartItem             CartItem[]
}

model ProductSKUAttribute {
  id          Int @id @default(autoincrement())
  skuId       Int
  attributeId Int

  productSku ProductSKU       @relation("SkuToAttribute", fields: [skuId], references: [id])
  attribute  ProductAttribute @relation(fields: [attributeId], references: [id])

  @@unique([skuId, attributeId])
}

enum ProductAttributeType {
  COLOR
  SWITCH
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  icon      String
  slug      String    @unique
  isDeleted Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model User {
  id        Int      @id @default(autoincrement())
  password  String
  email     String   @unique
  name      String
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Cart      Cart[]
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int? // Chỉ có nếu user đã đăng nhập
  user      User?      @relation(fields: [userId], references: [id])
  sessionId String?    @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[] // Danh sách sản phẩm trong giỏ
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  skuId     Int? // Nếu sản phẩm có nhiều biến thể (màu sắc, switch,...)
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart        @relation(fields: [cartId], references: [id])
  product Product     @relation(fields: [productId], references: [id])
  sku     ProductSKU? @relation(fields: [skuId], references: [id])

  @@unique([cartId, productId, skuId])
}
