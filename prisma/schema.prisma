generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  categoryId  Int
  brand       String       @default("Kh√¥ng")
  images      String[]
  tags        Json
  details     Json?
  isDeleted   Boolean      @default(false)
  slug        String       @unique
  CartItem    CartItem[]
  OrderItem   OrderItem[]
  category    Category     @relation(fields: [categoryId], references: [id])
  skus        ProductSKU[] @relation("ProductToSKU")
}

model Attribute {
  id        Int              @id @default(autoincrement())
  name      String           @unique
  label     String
  isDeleted Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  values    AttributeValue[]
}

model AttributeValue {
  id                   Int                   @id @default(autoincrement())
  value                String
  attributeId          Int
  attribute            Attribute             @relation(fields: [attributeId], references: [id])
  isDeleted            Boolean               @default(false)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  productSkuAttributes ProductSKUAttribute[]
}

model ProductSKU {
  id                   Int                   @id @default(autoincrement())
  productId            Int
  sku                  String                @unique
  price                Decimal
  quantity             Int
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  imageUrl             String?
  isDeleted            Boolean               @default(false)
  CartItem             CartItem[]
  OrderItem            OrderItem[]
  product              Product               @relation("ProductToSKU", fields: [productId], references: [id])
  productSkuAttributes ProductSKUAttribute[] @relation("SkuToAttribute")
}

model ProductSKUAttribute {
  id               Int            @id @default(autoincrement())
  skuId            Int
  attributeValueId Int
  attribute        AttributeValue @relation(fields: [attributeValueId], references: [id])
  productSku       ProductSKU     @relation("SkuToAttribute", fields: [skuId], references: [id])

  @@unique([skuId, attributeValueId])
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  icon      String
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isDeleted Boolean   @default(false)
  products  Product[]
}

model User {
  id        Int      @id @default(autoincrement())
  password  String
  email     String   @unique
  name      String
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Cart      Cart?
  Order     Order[]
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        Int        @id @default(autoincrement())
  cartId    Int
  skuId     Int
  quantity  Int        @default(1)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  productId Int
  cart      Cart       @relation(fields: [cartId], references: [id])
  product   Product    @relation(fields: [productId], references: [id])
  sku       ProductSKU @relation(fields: [skuId], references: [id])

  @@unique([cartId, productId, skuId])
}

model PaymentMethod {
  id         Int      @id @default(autoincrement())
  key        String   @unique
  name       String   @unique
  image      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isDisabled Boolean  @default(false)
  Order      Order[]
}

model Order {
  id              Int           @id @default(autoincrement())
  userId          Int?
  totalPrice      Decimal
  status          OrderStatus   @default(PENDING)
  paymentMethodId Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  fullName        String
  phoneNumber     String
  note            String?
  flag            Json          @default("{}")
  shipment        Json          @default("{}")
  email           String?
  orderCode       String        @unique
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  user            User?         @relation(fields: [userId], references: [id])
  orderItems      OrderItem[]
}

model OrderItem {
  id        Int        @id @default(autoincrement())
  orderId   Int
  productId Int
  skuId     Int
  quantity  Int
  price     Decimal
  order     Order      @relation(fields: [orderId], references: [id])
  product   Product    @relation(fields: [productId], references: [id])
  sku       ProductSKU @relation(fields: [skuId], references: [id])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}
