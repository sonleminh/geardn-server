generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ==== PRODUCT DOMAIN ====
//

model Product {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  slug        String        @unique
  description String?
  brand       String        @default("Kh√¥ng")
  images      String[]
  tags        Json
  details     Json?
  status      ProductStatus @default(ACTIVE)
  isVisible   Boolean       @default(true)
  isDeleted   Boolean       @default(false)
  categoryId  Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  category  Category     @relation(fields: [categoryId], references: [id])
  skus      ProductSKU[] @relation("ProductToSKU")
  CartItem  CartItem[]
  OrderItem OrderItem[]

  @@index([categoryId])
  @@index([slug])
}

model ProductSKU {
  id           Int       @id @default(autoincrement())
  productId    Int
  sku          String    @unique
  sellingPrice Decimal
  imageUrl     String?
  status       SKUStatus @default(ACTIVE)
  isDeleted    Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  product              Product               @relation("ProductToSKU", fields: [productId], references: [id])
  productSkuAttributes ProductSKUAttribute[] @relation("SkuToAttribute")
  CartItem             CartItem[]
  OrderItem            OrderItem[]
  ImportLogItem        ImportLogItem[]
  stocks               Stock[]
  ExportLogItem        ExportLogItem[]
  AdjustmentLogItem    AdjustmentLogItem[]

  @@index([productId])
}

model Attribute {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  label     String
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  values AttributeValue[]
}

model AttributeValue {
  id          Int      @id @default(autoincrement())
  value       String
  attributeId Int
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  attribute           Attribute             @relation(fields: [attributeId], references: [id])
  productSkuAttribute ProductSKUAttribute[]

  @@index([attributeId])
}

model ProductSKUAttribute {
  id               Int @id @default(autoincrement())
  skuId            Int
  attributeValueId Int

  productSku     ProductSKU     @relation("SkuToAttribute", fields: [skuId], references: [id])
  attributeValue AttributeValue @relation(fields: [attributeValueId], references: [id])

  @@unique([skuId, attributeValueId])
  @@index([skuId])
  @@index([attributeValueId])
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  slug      String   @unique
  icon      String
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
}

//
// ==== ORDER & CART ====
//

model Order {
  id              Int         @id @default(autoincrement())
  userId          Int?
  orderCode       String      @unique
  totalPrice      Decimal
  status          OrderStatus @default(PENDING)
  fullName        String
  phoneNumber     String?
  email           String?
  note            String?
  flag            Json        @default("{}")
  shipment        Json        @default("{}")
  paymentMethodId Int
  isDeleted       Boolean     @default(false)
  confirmedAt     DateTime?
  completedAt     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user          User?                @relation(fields: [userId], references: [id])
  paymentMethod PaymentMethod        @relation(fields: [paymentMethodId], references: [id])
  orderItems    OrderItem[]
  ExportLog     ExportLog[]
  statusHistory OrderStatusHistory[]
}

model OrderItem {
  id           Int      @id @default(autoincrement())
  orderId      Int
  productId    Int
  skuId        Int
  quantity     Int
  sellingPrice Decimal
  unitCost     Decimal?
  imageUrl     String

  productName String
  productSlug String

  skuCode       String
  skuAttributes Json

  warehouseId Int?

  order     Order      @relation(fields: [orderId], references: [id])
  product   Product    @relation(fields: [productId], references: [id])
  sku       ProductSKU @relation(fields: [skuId], references: [id])
  warehouse Warehouse? @relation(fields: [warehouseId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model OrderStatusHistory {
  id        Int         @id @default(autoincrement())
  orderId   Int
  oldStatus OrderStatus
  newStatus OrderStatus
  changedBy Int
  createdAt DateTime    @default(now())

  order Order @relation(fields: [orderId], references: [id])
  user  User  @relation(fields: [changedBy], references: [id])

  @@index([orderId])
  @@index([changedBy])
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User       @relation(fields: [userId], references: [id])
  items CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  skuId     Int
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart       @relation(fields: [cartId], references: [id])
  product Product    @relation(fields: [productId], references: [id])
  sku     ProductSKU @relation(fields: [skuId], references: [id])

  @@unique([cartId, productId, skuId])
  @@index([cartId])
  @@index([skuId])
  @@index([productId])
}

//
// ==== STOCK & IMPORT ====
//

model Warehouse {
  id        Int      @id @default(autoincrement())
  name      String
  address   String
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  importLogs    ImportLog[]
  Stock         Stock[]
  ExportLog     ExportLog[]
  AdjustmentLog AdjustmentLog[]
  OrderItem     OrderItem[]
}

model Stock {
  id          Int      @id @default(autoincrement())
  skuId       Int
  warehouseId Int
  quantity    Int      @default(0)
  unitCost    Decimal  @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sku       ProductSKU @relation(fields: [skuId], references: [id])
  warehouse Warehouse  @relation(fields: [warehouseId], references: [id])

  @@unique([skuId, warehouseId])
  @@index([skuId])
  @@index([warehouseId])
}

model ImportLog {
  id            Int        @id @default(autoincrement())
  warehouseId   Int
  type          ImportType
  note          String?
  createdBy     Int
  referenceCode String     @unique
  importDate    DateTime
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  warehouse Warehouse       @relation(fields: [warehouseId], references: [id])
  user      User            @relation(fields: [createdBy], references: [id])
  items     ImportLogItem[]
}

model ImportLogItem {
  id          Int      @id @default(autoincrement())
  importLogId Int
  skuId       Int
  quantity    Int
  unitCost    Decimal?
  note        String?

  importLog ImportLog  @relation(fields: [importLogId], references: [id])
  sku       ProductSKU @relation(fields: [skuId], references: [id])
}

model ExportLog {
  id            Int        @id @default(autoincrement())
  warehouseId   Int
  type          ExportType
  orderId       Int?
  note          String?
  referenceCode String     @unique
  createdBy     Int
  exportDate    DateTime
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  warehouse Warehouse       @relation(fields: [warehouseId], references: [id])
  user      User            @relation(fields: [createdBy], references: [id])
  order     Order?          @relation(fields: [orderId], references: [id])
  items     ExportLogItem[]
}

model ExportLogItem {
  id          Int      @id @default(autoincrement())
  exportLogId Int
  skuId       Int
  quantity    Int
  unitCost    Decimal?
  note        String?

  exportLog ExportLog  @relation(fields: [exportLogId], references: [id])
  sku       ProductSKU @relation(fields: [skuId], references: [id])
}

model AdjustmentLog {
  id             Int              @id @default(autoincrement())
  warehouseId    Int
  reason         AdjustmentReason
  type           AdjustmentType
  note           String?
  referenceCode  String           @unique
  createdBy      Int
  adjustmentDate DateTime
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  warehouse Warehouse           @relation(fields: [warehouseId], references: [id])
  user      User                @relation(fields: [createdBy], references: [id])
  items     AdjustmentLogItem[]
}

model AdjustmentLogItem {
  id              Int @id @default(autoincrement())
  adjustmentLogId Int
  skuId           Int
  warehouseId     Int

  quantityBefore Int
  quantityChange Int
  unitCostBefore Decimal?

  adjustmentLog AdjustmentLog @relation(fields: [adjustmentLogId], references: [id])
  sku           ProductSKU    @relation(fields: [skuId], references: [id])
}

// model AuditLog {
//   id        Int      @id @default(autoincrement())
//   table     String
//   action    String
//   targetId  Int
//   actor     String
//   actorId   Int
//   diff      Json
//   createdAt DateTime @default(now())

//   user User @relation(fields: [actorId], references: [id])
// }

//
// ==== USER & PAYMENT ====
//

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Cart               Cart?
  Order              Order[]
  ImportLog          ImportLog[]
  ExportLog          ExportLog[]
  AdjustmentLog      AdjustmentLog[]
  OrderStatusHistory OrderStatusHistory[]
}

model PaymentMethod {
  id         Int      @id @default(autoincrement())
  key        String   @unique
  name       String   @unique
  image      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isDisabled Boolean  @default(false)

  Order Order[]
}

//
// ==== ENUMS ====
//

enum UserRole {
  USER
  ADMIN
}

enum SKUStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

enum ImportType {
  NEW
  RETURN
  ADJUSTMENT
  TRANSFER
  OTHER
}

enum ExportType {
  CUSTOMER_ORDER // xu·∫•t cho ƒë∆°n h√†ng kh√°ch
  RETURN_TO_SUPPLIER // tr·∫£ h√†ng v·ªÅ nh√† cung c·∫•p
  TRANSFER // chuy·ªÉn kho n·ªôi b·ªô
  DAMAGE_LOSS // h·ªèng, m·∫•t m√°t
  MANUAL // ghi tay, ƒëi·ªÅu ch·ªânh th·ªß c√¥ng
}

enum AdjustmentType {
  INCREASE
  DECREASE
}

enum AdjustmentReason {
  INVENTORY_AUDIT
  DAMAGED
  LOST
  FOUND
  CUSTOMER_RETURN
  DATA_CORRECTION
}

enum ProductStatus {
  DRAFT
  ACTIVE
  OUT_OF_STOCK
  DISCONTINUED
}
